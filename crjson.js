var crjson=function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=1)}([function(e,t,o){"use strict";function n(e){return null===e?"null":"boolean"==typeof e?"boolean":"number"==typeof e?"number":"string"==typeof e?"string":Array.isArray(e)?"array":"object"==typeof e?"object":void 0}function r(e,t){const o={null:0,boolean:1,number:2,string:3,array:4,object:5},r=n(e),i=n(t);return r!=i?o[r]-o[i]:"boolean"==r||"number"==r?e-t:"string"==r?e>t?1:e<t?-1:0:0}function i(e,t){return void 0===e&&void 0===t?0:void 0===e&&void 0!==t?-1:void 0!==e&&void 0===t?1:e.userID!=t.userID?r(e.userID,t.userID):e.opID-t.opID}function s(e,t){for(let o=0;o<Math.max(e.length,t.length);o++){const n=e[o],r=t[o];if(void 0===n)return-1;if(void 0===r)return 1;if(n!=r)return n-r}return 0}function u(e,t){return e.filter(e=>0==i(e.parent,t))}function d(e){if(0!=e.length)return e.reduce((e,t)=>{if(t.counter>e.counter)return t;if(e.counter>t.counter)return e;const o=i(t.uid,e.uid);if(o>0)return t;if(o<0)return e;throw"Could not find ordering between objects"})}function c(e){const t=[];e.forEach(e=>{void 0!==e.index&&"array"==n(e.index)&&t.push(e.index)}),t.sort(s);const o=[];let r;return t.forEach(e=>{void 0!==r&&0==s(r,e)||o.push(e),r=e}),o}function l(e){const t={};return e.forEach(e=>{void 0!==e.index&&"string"==n(e.index)&&(void 0!==t[e.index]?t[e.index].push(e):t[e.index]=[e])}),t}function a(e){const t={};return e.forEach(e=>{if(void 0!==e.index&&"array"==n(e.index)){const o=e.index.toString();void 0!==t[o]?t[o].push(e):t[o]=[e]}}),t}function h(e,t){const o=[];for(const n in e){const r=t(e[n],n,e);void 0!==r&&o.push(r)}return o}function f(e,t){const o={};for(const n in e){const r=t(e[n],n,e);void 0!==r&&(o[n]=r)}return o}function p(e,t){const o=[];function r(t){const i=d(t);if(void 0===i)return;o.push(i);const s=n(i.value);return"array"==s?function(t){const o=u(e,t),n=a(o),i=c(o),s=f(n,r);return h(i,e=>s[e])}(i.uid):"object"==s?(p=i.uid,f(l(u(e,p)),r)):i.value;var p}return void 0===t&&(t=u(e,void 0)),{json:r(t),usefulData:o}}function v(e,t){return JSON.stringify(e)==JSON.stringify(t)}function _(e){return JSON.parse(JSON.stringify(e))}function m(e,t){return t.reduce((t,o)=>t||v(o,e),!1)}function g(e,t){let o,n;if(void 0!==e&&void 0!==t){o=e.slice(),n=t.slice();for(let o=0;o<e.length-t.length;o++)n.push(0);for(let n=0;n<t.length-e.length;n++)o.push(0)}else o=e,n=t;return function e(t,o,n,r){let i=0,s=Math.pow(2,n+4);if(void 0!==t&&void 0!==t[n]&&(i=Math.max(i,t[n])),void 0===o||void 0===o[n]||r||(s=Math.min(s,o[n])),i>s)throw`Backwards interval: (${t} ${o})`;if(i==s&&(void 0!==t&&n+1>=t.length||void 0!==o&&n+1>=o.length))throw`Empty interval: (${t} ${o})`;if(i+1>=s)return[i].concat(e(t,o,n+1,i<s));const u=i+1,d=Math.min(u+20,s);return[u+Math.floor(Math.random()*(d-u))]}(o,n,0,!1)}Object.defineProperty(t,"__esModule",{value:!0}),t.betterTypeOf=n,t.compare=r,t.compareUIDs=i,t.compareVectorIndices=s,t.filterChildren=u,t.mergeAtoms=d,t.sortedVectorIndices=c,t.groupByStringIndex=l,t.groupByVectorIndex=a,t.arrayMap=h,t.objectMap=f,t.modelToJson=p,t.jsonEqual=v,t.jsonCopy=_,t.jsonInList=m,t.vectorIndexBetween=g;t.State=class{constructor(e){this._uid={userID:e,opID:0},this._model=[],this._json=null,this._tombstones=[],this._counter=0,this._listeners=[]}getUID(){const e={userID:this._uid.userID,opID:this._uid.opID};return this._uid.opID++,e}apply(e,t,o){if(0==e.length&&0==t.length)return;this._model.forEach(e=>{console.assert(!isNaN(e.counter),"Counter is NAN"),console.assert(void 0!==e.counter,"Counter is undefined")}),this._model.push(...e),this._tombstones.push(...t),this._counter=Math.max(this._counter,this._highestCounter(e)),this._model=this._model.filter(e=>!m(e.uid,this._tombstones));const n=p(this._model,void 0);this._json=void 0===n?null:n.json,this._model=this._model.filter(e=>n.usefulData.indexOf(e)>=0),o&&this._emit(e,t),this._changed(this._model,this._json)}emitCompleteState(){0!=this._model.length&&this._emit(this._model,this._tombstones)}state(){return{model:_(this._model),json:_(this._json)}}setState(e,t){const o=this._jsonDiff(e,t);this.apply(o.actions,o.tombstones,!0)}addListener(e){this._listeners.push(e)}removeListener(e){const t=this._listeners.indexOf(e);t>=0&&this._listeners.splice(t,1)}_changed(e,t){this._listeners.forEach(o=>{o(e,t)})}_emit(e,t){}_highestCounter(e){return e.reduce((e,t)=>t.counter>e?t.counter:e,-1)}_jsonDiff(e,t){const o=(t,_,m)=>{const x=d(_);if(void 0===x&&void 0===m)return;if(void 0===x&&void 0!==m)return void i.push(...r(m,t,void 0));if(void 0===m&&void 0!==x)return void s.push(x.uid);const b=n(x.value);if(b==n(m))return"array"==b?((t,n)=>{const s=u(e,t),d=a(s),l=c(s),_=f(d,t=>p(e,t).json),m=h(l,e=>void 0===_[e]?void 0:e),x=h(m,e=>_[e]),b=h(m,e=>d[e]),y={};y[[0,0].toString()]={cost:0};for(let e=1;e<=x.length;e++)y[[e,0].toString()]={cost:e,prev:[e-1,0],operation:"delete",oldIndex:e-1,newIndex:-1};for(let e=1;e<=n.length;e++)y[[0,e].toString()]={cost:e,prev:[0,e-1],operation:"insert",oldIndex:-1,newIndex:e-1};for(let e=1;e<=x.length;e++)for(let t=1;t<=n.length;t++){let o=1;v(x[e-1],n[t-1])&&(o=0);const r={cost:y[[e-1,t].toString()].cost+1,prev:[e-1,t],operation:"delete"},i={cost:y[[e,t-1].toString()].cost+1,prev:[e,t-1],operation:"insert"},s={cost:y[[e-1,t-1].toString()].cost+o,prev:[e-1,t-1]};o>0&&(s.operation="substitute");let u=s;i.cost<u.cost&&(u=i),r.cost<u.cost&&(u=r),u.oldIndex=e-1,u.newIndex=t-1,y[[e,t].toString()]=u}let I=y[[x.length,n.length].toString()];const j=[];for(;I.cost>0;)void 0!==I.operation&&(j[I.cost-1]=I),I=y[I.prev.toString()];let S,M;j.forEach(e=>{if("insert"==e.operation){let o=void 0;e.oldIndex==S?o=M:e.oldIndex>=0&&(o=m[e.oldIndex]);let s=void 0;e.oldIndex+1<m.length&&(s=m[e.oldIndex+1]);const u=g(o,s);i.push(...r(n[e.newIndex],t,u)),S=e.oldIndex,M=u}else"delete"==e.operation?o(t,b[e.oldIndex],void 0):"substitute"==e.operation&&o(t,b[e.oldIndex],n[e.newIndex])})})(x.uid,m):"object"==b?((t,n)=>{const s=l(u(e,t));for(const e in s)o(t,s[e],n[e]);for(const e in n)e in s||i.push(...r(n[e],t,e))})(x.uid,m):void(x.value==m||i.push(...r(m,t,x.index)));i.push(...r(m,t,x.index))},r=(e,t,o)=>{const r=[],i=(e,t,o)=>{const s=n(e);let u;u="array"==s?[]:"object"==s?{}:e;const d={uid:this.getUID(),value:u,counter:this._counter++};void 0!==t&&(d.parent=t),void 0!==o&&(d.index=o),r.push(d),"array"==s?((e,t)=>{let o=void 0;e.forEach(e=>{const n=g(o,void 0);i(e,t,n),o=n})})(e,d.uid):"object"==s&&((e,t)=>{for(const o in e)i(e[o],t,o)})(e,d.uid)};return i(e,t,o),r},i=[],s=[];return o(void 0,u(e,void 0),t),{actions:i,tombstones:s}}}},function(e,t,o){"use strict";function n(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}Object.defineProperty(t,"__esModule",{value:!0}),n(o(0)),n(o(2)),n(o(3))},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=o(0);class r extends n.State{constructor(e){super(e),this._peers=[]}addPeer(e){this._peers.indexOf(e)<0&&e!==this&&(this._peers.push(e),e.addPeer(this),e.emitCompleteState())}removePeer(e){const t=this._peers.indexOf(e);t>=0&&(this._peers.splice(t,1),e.removePeer(this))}_emit(e,t){this._peers.forEach(o=>{o.apply(e,t)})}}t.LocalState=r},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=o(0);class r extends n.State{constructor(e){super(e),this._peers=[]}_sendMessage(e,t){let o=this._peers;void 0!==t&&(o=[t]),o.forEach(t=>{t.send(e)}),console.log("Model is:",this._model),console.log("TX:",e)}_requestCompleteState(e){this._sendMessage({action:"sendCompleteState"},e)}_receivedMessage(e){"sendCompleteState"==e.action?this.emitCompleteState():"update"==e.action&&this.apply(e.data,e.tombstones),console.log("RX:",e),console.log("Model is now:",this._model)}addPeer(e){this._peers.indexOf(e)<0&&(e.on("data",this._receivedMessage.bind(this)),this._peers.push(e),this._requestCompleteState(e))}removePeer(e){const t=this._peers.indexOf(e);t>=0&&this._peers.splice(t,1)}_emit(e,t){this._sendMessage({action:"update",data:e,tombstones:t})}}t.StateOverSimplePeer=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,